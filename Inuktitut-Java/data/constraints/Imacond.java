/* Generated By:JavaCC: Do not edit this line. Imacond.java */
package data.constraints;
import java.io.ByteArrayInputStream;
import java.util.Vector;


    public class Imacond implements ImacondConstants {
        static public void main( String[] args )
            throws ParseException, TokenMgrError {
            ByteArrayInputStream bais = new ByteArrayInputStream(args[0].getBytes());
            Imacond parser = new Imacond( bais ) ;
            parser.ParseCondition() ;
        }

       public Imacond(String str) {
       this(new ByteArrayInputStream(str.getBytes()));
           }

    /*
     * Syntaxe:
     * 
     * <condMorphMult> ::= <condMorph> ("+" <condMorphMult>)*
     * <condMorph> ::= <condset> (" " <condMorph>)*
     * <condset> ::= <cond> ("," <condset>)*
     * <cond> ::= "!"? ( "(" <condMorph> ")" | <attrvalpair> | <condid> )
     * <attrvalpair> ::= <attr> ":" <val> 
     *      "!" indique que la valeur de l'attribut n'est pas �gale � 'val'.
     * <condid> ::= ["cp" | "cf"] "(" <morphid> ")"
     *
    */
  final public Condition ParseCondition() throws ParseException {
Condition cond;
    cond = CondMorphMult();
    jj_consume_token(0);
          {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public Condition CondMorphMult() throws ParseException {
        Condition c1,c2;
        Vector cs = new Vector();
    c1 = CondMorph();
          cs.add(c1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(PLUS);
      c2 = CondMorphMult();
          cs.add(c2);
    }
        if (cs.size()==1)
                {if (true) return c1;}
        else
                {if (true) return new Condition.OverSeveralMorphemes(cs);}
    throw new Error("Missing return statement in function");
  }

  final public Condition CondMorph() throws ParseException {
        String s1,s2,res;
        Condition c1,c2;
        Vector cs = new Vector();
    c1 = Condset();
          cs.add(c1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(SPACE);
      c2 = CondMorph();
          cs.add(c2);
    }
        if (cs.size()==1)
                {if (true) return c1;}
        else
                {if (true) return new Condition.Or(cs);}
    throw new Error("Missing return statement in function");
  }

  final public Condition Condset() throws ParseException {
        Condition c1,c2;
        Vector cs = new Vector();
    c1 = Cond();
          cs.add(c1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      c2 = Condset();
          cs.add(c2);
    }
          if (cs.size()==1)
                {if (true) return c1;}
          else
                {if (true) return new Condition.And(cs);}
    throw new Error("Missing return statement in function");
  }

  final public Condition Cond() throws ParseException {
boolean neg = false;
String res,s;
Token sc;
Condition cond;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
      jj_consume_token(NEG);
          neg = true;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAR:
      jj_consume_token(OPENPAR);
      cond = CondMorph();
      jj_consume_token(CLOSEPAR);
          if (neg) cond.truth = false;
      break;
    case IDENT:
      cond = AttrValPair();
          if (neg) cond.truth = false;
      break;
    case CP:
    case CF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CP:
        sc = jj_consume_token(CP);
        break;
      case CF:
        sc = jj_consume_token(CF);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPENPAR);
      s = Morphid();
      jj_consume_token(CLOSEPAR);
          cond = new Condition.Cid(sc.image,s);
          if (neg) cond.truth = false;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public Condition AttrValPair() throws ParseException {
String res = "";
String val;
Token t;
    t = jj_consume_token(IDENT);
          res = res + t.image;
    jj_consume_token(COLON);
    val = Value();
                res = res + ":" + val;
                {if (true) return new AttrValCond(res);}
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {
String res = "";
Token t = null;
    t = jj_consume_token(IDENT);
          res = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BAR:
      t = jj_consume_token(BAR);
          res = res + t.image;
      t = jj_consume_token(IDENT);
          res = res + t.image;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String Morphid() throws ParseException {
Token t1,t2;
    jj_consume_token(IDENT);
    jj_consume_token(COLON);
    t1 = jj_consume_token(IDENT);
    jj_consume_token(BAR);
    t2 = jj_consume_token(IDENT);
          {if (true) return "id:"+t1.image+"/"+t2.image;}
    throw new Error("Missing return statement in function");
  }

  public ImacondTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x800,0x400,0x80,0x3000,0x7100,0x10,};
   }

  public Imacond(java.io.InputStream stream) {
     this(stream, null);
  }
  public Imacond(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ImacondTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public Imacond(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ImacondTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public Imacond(ImacondTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(ImacondTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[15];
    for (int i = 0; i < 15; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

    }
